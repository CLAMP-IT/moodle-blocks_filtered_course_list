<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * An abstract class to generate rubrics based on config values.
 * Subclasses will need to define get_rubrics, and may wish to subclass
 * config_validator and reference that subclass from $configvalidator.
 *
 * @package    block_filtered_course_list
 * @copyright  2016 CLAMP
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace block_filtered_course_list\local;

defined('MOODLE_INTERNAL') || die();

abstract class filter_base {
    /** @var array Class name to use when validating config */
    public $configvalidator = "\\block_filtered_course_list\\local\\config_validator";
    /** @var array Elements of the rubric config line */
    public $config;
    /** @var array A list of courses the current user is enrolled in */
    public $courselist;
    /** @var array Config settings for the block */
    public $blockconfig;
    /** @var array A list of the rubric objects generated by the line */
    public $rubrics = array();

    /**
     * Constructor
     *
     * @param array $config Array of config elements parsed from line
     * @param array $courselist An array of courses the user is enrolled in
     * @param array $blockconfig Details of the block configuration
     */
    public function __construct($config, $courselist, $blockconfig) {
        $this->courselist = $courselist;
        $this->blockconfig = $blockconfig;
        $this->config = $this->validate_config($config);
    }

    /**
     * Run config validation on given config data, using the config validator
     * for this subclass, if it exists, or the nearest defined config validator
     * going up the class tree.
     * This method is static so that we can run it up through parent classes
     * without instantiating.
     *
     * @return string \block_filtered_course_list\local\filter_{filtername}\config_validator
     */
    public static function get_config_validator() {
        $classname = get_called_class();
        $namespace = preg_replace('/\\w+$/', '', $classname);
        $validator = "$namespace" . "config_validator";
        if (class_exists($validator)) {
            return $validator;
        } elseif ($pclass = get_parent_class(get_called_class())) {
            return $pclass::get_config_validator();
        }
    }

    /**
     * Run config validation on given config data
     *
     * @param array $config Array of config elements parsed from line
     * @return array array of config name => validated value
     */
    public function validate_config($config) {
        $classname = $this->get_config_validator();
        $validator = new $classname($config);
        return $validator->validate();
    }

    /**
     * Each subclass must define how to get the right rubrics
     */
    abstract public function get_rubrics();
}
